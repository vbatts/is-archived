package cratesio

import (
	"net/url"
	"strings"
	"testing"
)

func TestCargoLoad(t *testing.T) {
	fpath := "testdata/Cargo.toml"
	c, err := LoadCargoFile(fpath)
	if err != nil {
		t.Fatal(err)
	}

	expected := map[string]int{
		"yall":        0,
		"tokio":       0,
		"hard-xml":    0,
		"uuid":        0,
		"examplename": 0,
	}
	for k := range c.Dependencies {
		_, ok := expected[k]
		if !ok {
			t.Errorf("expected to find %q dependency", k)
		}
	}
}

/*
From https://doc.rust-lang.org/cargo/reference/pkgid-spec.html

registry+https://github.com/rust-lang/crates.io-index#regex@1.4.3
https://github.com/rust-lang/cargo#0.52.0
https://github.com/rust-lang/cargo#cargo-platform@0.1.2
ssh://git@github.com/rust-lang/regex.git#regex@1.4.3
git+ssh://git@github.com/rust-lang/regex.git#regex@1.4.3
git+ssh://git@github.com/rust-lang/regex.git?branch=dev#regex@1.4.3
*/

var cl string = `
# This file is automatically @generated by Cargo.
# It is not intended for manual editing.
version = 3

[[package]]
name = "aho-corasick"
version = "0.7.20"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "cc936419f96fa211c1b9166887b38e5e40b19958e5b895be7c1f93adec7071ac"
dependencies = [
 "memchr",
]

[[package]]
name = "android_system_properties"
version = "0.1.5"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "819e7219dbd41043ac279b19830f2efc897156490d7fd6ea916720117ee66311"
dependencies = [
 "libc",
]

[[package]]
name = "anyhow"
version = "1.0.69"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "224afbd727c3d6e4b90103ece64b8d1b67fbb1973b1046c2281eed3f3803f800"

[[package]]
name = "autocfg"
version = "1.1.0"
source = "registry+https://github.com/rust-lang/crates.io-index"
checksum = "d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa"
`

func TestCargoLock(t *testing.T) {
	rdr := strings.NewReader(cl)
	c, err := LoadCargoLock(rdr)
	if err != nil {
		t.Fatalf("Failed to load Cargo.lock: %s", err)
	}
	if len(c.Package) != 4 {
		t.Errorf("expected %d packages in Cargo.lock, got %d", 4, len(c.Package))
	}
	for _, pkg := range c.Package {
		if pkg.Source != "" {
			u, err := url.Parse(pkg.Source)
			if err != nil {
				t.Errorf("package source failed to parse as URL: %q", pkg.Source)
			}
			t.Logf("%s://%s%s", u.Scheme, u.Host, u.Path)
		}
	}
}
